diff -Nrup A/inc/eeprom.h B/inc/eeprom.h
--- A/inc/eeprom.h	2011-10-10 13:51:00.000000000 +0200
+++ B/inc/eeprom.h	2022-07-21 17:09:22.021188373 +0200
@@ -30,6 +30,8 @@
 /* Exported constants --------------------------------------------------------*/
 /* Define the size of the sectors to be used */
 #define PAGE_SIZE               (uint32_t)0x4000  /* Page size = 16KByte */
+                                                  /* for bigger page size eeprom may
+						    need to be cached in sram */
 
 /* Device voltage range supposed to be [2.7V to 3.6V], the operation will 
    be done by word  */
@@ -37,15 +39,15 @@
 
 /* EEPROM start address in Flash */
 #define EEPROM_START_ADDRESS  ((uint32_t)0x08008000) /* EEPROM emulation start address:
-                                                  from sector2 : after 16KByte of used 
-                                                  Flash memory */
+                                                  from sector2 : after 32KByte of used 
+                                                  Flash memory, third and fourth 16kB bank */
 
 /* Pages 0 and 1 base and end addresses */
 #define PAGE0_BASE_ADDRESS    ((uint32_t)(EEPROM_START_ADDRESS + 0x0000))
 #define PAGE0_END_ADDRESS     ((uint32_t)(EEPROM_START_ADDRESS + (PAGE_SIZE - 1)))
 #define PAGE0_ID               FLASH_Sector_2
 
-#define PAGE1_BASE_ADDRESS    ((uint32_t)(EEPROM_START_ADDRESS + 0x4000))
+#define PAGE1_BASE_ADDRESS    ((uint32_t)(EEPROM_START_ADDRESS + PAGE_SIZE))
 #define PAGE1_END_ADDRESS     ((uint32_t)(EEPROM_START_ADDRESS + (2 * PAGE_SIZE - 1)))
 #define PAGE1_ID               FLASH_Sector_3
 
@@ -69,7 +71,7 @@
 #define PAGE_FULL             ((uint8_t)0x80)
 
 /* Variables' number */
-#define NB_OF_VAR             ((uint8_t)0x03)
+#define NB_OF_VAR             ((uint8_t) (NUM_KEYS * (SIZEOF_IR/2 + 1) + WAKE_SLOTS * SIZEOF_IR/2))
 
 /* Exported types ------------------------------------------------------------*/
 /* Exported macro ------------------------------------------------------------*/
@@ -77,6 +79,7 @@
 uint16_t EE_Init(void);
 uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data);
 uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data);
+FLASH_Status EE_Format(void);
 
 #endif /* __EEPROM_H */
 
diff -Nrup A/src/eeprom.c B/src/eeprom.c
--- A/src/eeprom.c	2011-10-10 13:51:28.000000000 +0200
+++ B/src/eeprom.c	2022-07-21 20:13:38.990736307 +0200
@@ -39,7 +39,7 @@ extern uint16_t VirtAddVarTab[NB_OF_VAR]
 
 /* Private function prototypes -----------------------------------------------*/
 /* Private functions ---------------------------------------------------------*/
-static FLASH_Status EE_Format(void);
+//static FLASH_Status EE_Format(void);
 static uint16_t EE_FindValidPage(uint8_t Operation);
 static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data);
 static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data);
@@ -113,19 +113,19 @@ uint16_t EE_Init(void)
         /* Transfer data from Page1 to Page0 */
         for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
         {
-          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
+          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VarIdx)
           {
             x = VarIdx;
           }
           if (VarIdx != x)
           {
             /* Read the last variables' updates */
-            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
+            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
             /* In case variable corresponding to the virtual address was found */
             if (ReadStatus != 0x1)
             {
               /* Transfer the variable to the Page0 */
-              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
+              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
               /* If program operation was failed, a Flash error code is returned */
               if (EepromStatus != FLASH_COMPLETE)
               {
@@ -204,19 +204,19 @@ uint16_t EE_Init(void)
         /* Transfer data from Page0 to Page1 */
         for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
         {
-          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
+          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VarIdx)
           {
             x = VarIdx;
           }
           if (VarIdx != x)
           {
             /* Read the last variables' updates */
-            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
+            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
             /* In case variable corresponding to the virtual address was found */
             if (ReadStatus != 0x1)
             {
               /* Transfer the variable to the Page1 */
-              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
+              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
               /* If program operation was failed, a Flash error code is returned */
               if (EepromStatus != FLASH_COMPLETE)
               {
@@ -349,7 +349,7 @@ uint16_t EE_WriteVariable(uint16_t VirtA
   * @retval Status of the last operation (Flash write or erase) done during
   *         EEPROM formating
   */
-static FLASH_Status EE_Format(void)
+FLASH_Status EE_Format(void)
 {
   FLASH_Status FlashStatus = FLASH_COMPLETE;
 
@@ -571,15 +571,15 @@ static uint16_t EE_PageTransfer(uint16_t
   /* Transfer process: transfer variables from old to the new active page */
   for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
   {
-    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
+    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
     {
       /* Read the other last variable updates */
-      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
+      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
       /* In case variable corresponding to the virtual address was found */
       if (ReadStatus != 0x1)
       {
         /* Transfer the variable to the new active page */
-        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
+        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
         /* If program operation was failed, a Flash error code is returned */
         if (EepromStatus != FLASH_COMPLETE)
         {
